<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/com/example/ovapp/components/CustomSuggestionPopup.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/HomeController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/LoginController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/ProfileController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/RegisterController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/SearchResultController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/SidebarController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/controllers/TravelHistoryController.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/enums/EPage.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/Destination.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/FareRoute.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/FareRouteDestination.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/Leg.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/NSApiRoot.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/Origin.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/Product.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/Stops.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/TransferMessages.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/nsapi/Trip.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/models/user/User.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/tools/Page.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/tools/PageInfo.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/tools/Request.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/tools/TripDetails.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/Main.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/TimeUtils.java;/Users/samvandop/Downloads/OV_APP/src/main/java/com/example/ovapp/Users.java;/Users/samvandop/Downloads/OV_APP/src/main/java/module-info.java;/Users/samvandop/Downloads/OV_APP/src/main/resources/json/history.json;/Users/samvandop/Downloads/OV_APP/src/main/resources/json/users.json;/Users/samvandop/Downloads/OV_APP/pom.xml;/Users/samvandop/Downloads/OV_APP/README.md" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;/Users/samvandop/Downloads/OV_APP&quot;:&quot;{\&quot;/src/main/java/com/example/ovapp/Main.java\&quot;:\&quot;This Main.java file is the entry point for the JavaFX application.\\n\\nKey functions:\\n\\n- Implements the Application class which is required for JavaFX applications.\\n\\n- Defines the main() method which launches the JavaFX application by calling launch().\\n\\n- Implements the start() method which is called by the launch() method.\\n\\n- Loads the home-view.fxml layout file using FXMLLoader and sets it as the root node. \\n\\n- Creates a Scene with the root node and sets properties like size, title etc.  \\n\\n- Sets icons, makes the stage non-resizable and sets the initial scene.\\n\\n- Shows the primary stage to display the application UI loaded from the FXML file.\\n\\n- Stores the primary Stage as a static field so it can be accessed from other classes.\\n\\nSo in summary, it:\\n\\n- Acts as the entry point and launcher class \\n- Loads and sets the initial UI layout\\n- Configures and displays the main application window\\n- Makes the primary stage globally accessible\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/TransferMessages.java\&quot;:\&quot;This TransferMessages.java file defines a model class for transferring accessibility messages in the NSAPI (NetSuite API) integration.\\n\\nKey things:\\n\\n- It is a POJO (Plain Old Java Object) class that defines a model/object for transferring accessibility message data\\n- It has a single String property called accessibilityMessage\\n- getAccessibilityMessage() and setAccessibilityMessage() provide getter and setter methods for accessing/modifying the accessibilityMessage property value\\n\\nKey functions:\\n\\n- getAccessibilityMessage() - Gets the value of the accessibilityMessage property\\n- setAccessibilityMessage() - Sets the value of the accessibilityMessage property \\n\\nSo in summary, this class defines a simple data transfer object (DTO) for an accessibility message string that can be used when integrating with the NetSuite API. It allows easily getting/setting the message value in code through the getter/setter methods.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/Leg.java\&quot;:\&quot;This Java file defines a Leg class that represents a leg of a journey in a public transport trip.\\n\\nKey things:\\n\\n- It defines a Leg class with fields to store properties of a leg:\\n  - name - Name of the leg\\n  - idx - Index/ID of the leg\\n  - origin - Origin location \\n  - product - Transport product (e.g. bus, train)\\n  - destination - Destination location\\n  - transferMessages - List of transfer messages (instructions for transfers)\\n  - stops - List of stops on the leg\\n\\n- The fields use other classes like Origin, Product, Destination to represent locations and transport details\\n\\n- It uses List to define the transferMessages and stops fields, indicating these can contain multiple items\\n\\n- This allows an object of this class to encapsulate all the data about a single leg of a journey, including origin, destination, transport details, stops and transfer instructions \\n\\n- Objects of this class could then be used by other classes/services to represent, retrieve, process and display the details of individual legs within a multi-leg public transport trip.\\n\\nSo in summary, it defines a data model class to represent a single leg of a journey with all relevant properties.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/Origin.java\&quot;:\&quot;This Java file defines a model class called Origin to represent origin information for a trip.\\n\\nKey things it does:\\n\\n- Defines properties to store origin details like name, city, type, planned/actual tracks, transfer messages, stops etc. \\n\\n- getFormattedTime() method formats the plannedDateTime string from yyyy-MM-dd\\u0027T\\u0027HH:mm:ssZ format to HH:mm format for display.\\n\\n- getFormattedCheckin() method takes the checkinStatus string and returns a translated Dutch string for display based on the status value.\\n\\n- It acts as a data model/class to represent an origin object and provide helper methods to format some of the property values for display purposes.\\n\\nKey functions:\\n\\n- getFormattedTime() - Formats planned date/time for display\\n- getFormattedCheckin() - Translates checkin status to Dutch string \\n- Properties to store origin details\\n\\nSo in summary, it defines a data model for origin with properties and helper methods to format values from the model for presentation/display.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/Product.java\&quot;:\&quot;This Java file defines a Product model class that will be used in the com.example.ovapp.models.nsapi package.\\n\\nKey things:\\n\\n- It defines a Product class that will represent a product object.\\n\\n- The Product class has a single public String field called number that will store the product number. \\n\\n- This is a simple POJO (Plain Old Java Object) class that just defines the data structure/schema of a product with a number field. \\n\\n- It does not contain any methods - it is just defining the data model/structure.\\n\\n- This class will be used to map product data retrieved from an API or database to Java objects that can then be used in the application code.\\n\\n- Instances of Product can be created, the number field set, and then the objects passed around and used within the application.\\n\\nSo in summary, this file:\\n\\n1. Defines a Product data model class \\n2. Specifies a product has a number as a String\\n3. Sets up a simple POJO for mapping product data to objects\\n4. Will be used to represent product data within the application\\n\\nNo key functions defined, just the basic data structure/class definition.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/TravelHistoryController.java\&quot;:\&quot;This TravelHistoryController class:\\n\\n- Handles the travel history page in the UI. It controls the display of past trip details.\\n\\nKey functions:\\n\\n- initialize(): Loads trip details from a JSON file and populates the labels on the UI to display arrival/departure times, duration, transfers etc. \\n\\n- history_handleRouteXButtonClick(): Event handlers for when the route buttons are clicked. Currently empty but likely to open a popup with more details for that route.\\n\\n- onBackButtonPressed(): Navigates back to the home page when a back button is pressed.\\n\\n- Various @FXML annotated fields link the controller to the UI elements like labels, buttons etc. \\n\\n- It loads a TripDetails object from JSON and maps the fields to labels to display the trip summary. \\n\\n- Allows toggling a sidebar pane on the UI.\\n\\nSo in summary, it controls the display of past trip history data by loading it from a file and mapping it to UI elements for the user to view travel details.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/user/User.java\&quot;:\&quot;This Java file defines a User model class:\\n\\n- It is located in the package com.example.ovapp.models.user, indicating it is a model class for representing users.\\n\\n- The User class has two fields - username and password, both strings. \\n\\n- It has a constructor that takes a username and password and assigns them to the fields.\\n\\nKey functions:\\n\\n- Defines a User model/object to represent a user \\n- Stores the username and password as string properties\\n- Constructor to initialize a new User object by passing in username and password\\n\\nIn summary, this file defines a basic User model/class to represent a user entity in the system with username and password attributes. A new User object can be created by passing those values to the constructor. This allows other parts of the code to work with User objects for things like authentication, authorization, data retrieval etc.\&quot;,\&quot;/src/main/java/module-info.java\&quot;:\&quot;This module-info.java file defines a Java module for the com.example.ovapp application.\\n\\nThe key functions of this file are:\\n\\n- Defines the module name as com.example.ovapp\\n- Requires (imports) several other modules like javafx.controls, javafx.fxml, java.desktop, etc that this module depends on.\\n- Opens and exports packages within this module so that they are accessible to other modules.\\n  - opens allows classes in the package to be accessed at the source level by other modules.\\n  - exports allows classes in the package to be accessed reflectively by other modules.\\n- Specifically, it opens and exports the main application package (com.example.ovapp) and all controller, model and utility packages so that they can be accessed by FXML and other modules.\\n\\nIn summary, it:\\n\\n1. Defines the module \\n2. Declares module dependencies\\n3. Controls access to packages within the module from other modules\\n\\nThis allows proper modularization and access control for the Java application defined in this module.\&quot;,\&quot;/src/main/java/com/example/ovapp/tools/PageInfo.java\&quot;:\&quot;This PageInfo class is used to encapsulate information about a JavaFX FXML page. It allows loading and accessing the key components of an FXML page in an object-oriented way.\\n\\nKey functions:\\n\\n- Constructor takes the FXML resource path as a parameter.\\n\\n- getParent() method loads the FXML file if not already loaded and returns the Parent node. \\n\\n- getScene() method creates and returns a Scene if not already created, using the Parent node.\\n\\n- getController() method returns the controller instance associated with the FXML file, after loading the Parent. \\n\\n- It caches the loaded Parent, Scene and Controller objects internally so they are only loaded once.\\n\\n- Provides a clean object-oriented way to work with an FXML page and its components without having to directly deal with the FXMLLoader and Scene creation each time.\\n\\nSo in summary, it encapsulates the loading and accessing of an FXML page and its associated objects like the Parent, Scene and Controller in a reusable PageInfo object.\&quot;,\&quot;/src/main/java/com/example/ovapp/Users.java\&quot;:\&quot;This Users.java file handles user management functionality for the application:\\n\\n- It loads the list of users from a users.json file on initialization.\\n\\n- It provides singleton access to the Users instance via the getInstance() method.\\n\\n- Key functions:\\n  - createUser() - Adds a new user to the list if validation passes\\n  - deleteCurrentUser() - Removes the current logged in user \\n  - logIntoUser() - Sets the current user by username/password\\n  - isSomeUserLoggedIn() - Checks if a user is logged in\\n  - logoutCurrentUser() - Logs out the current user\\n  - Validation methods like isUsernameDuplicate()\\n  - saveUsers() - Saves the updated user list to the json file\\n\\n- It maintains the current logged in User object and list of all Users\\n- Provides CRUD operations to manage users from a single source of truth.\\n- Ensures data integrity by validating on create/update and saving to file.\\n\\nSo in summary, it centrally manages all user data and authentication state for the app.\&quot;,\&quot;/src/main/resources/json/history.json\&quot;:\&quot;This JSON file contains historical public transport journey data.\\n\\nKey functions:\\n\\n- Stores details of a single past journey, including:\\n  - Number of transfers\\n  - Total duration\\n  - Departure and arrival times\\n- Provides stop details for each leg of the journey, including:\\n  - Departure and arrival stations \\n  - Departure/arrival platforms/tracks\\n  - Number of stops on that leg\\n  - Transfer details like time spent transferring\\n- Formats the stop details in a readable multi-line string for each leg\\n- Allows retrieving a single past journey\\u0027s details by parsing the JSON\\n- Provides a standardized format for storing historical public transport journeys in a file\\n\\nSo in summary, this file stores a record of a past public transport trip in JSON format, with all relevant details like stations, times, transfers, etc. to allow looking up and viewing details of that specific journey.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/ProfileController.java\&quot;:\&quot;This ProfileController class handles the profile page functionality in the application.\\n\\nKey functions:\\n\\n- toggleSideBar() - Toggles visibility of the sidebar pane\\n- back() - Event handler for back button, navigates back \\n- saveDetails() - Saves updated username and password to the user object\\n- deleteAccount() - Deletes the current user and navigates to home page\\n- onBackButtonPressed() - Navigates back to home page\\n- initialize() - Initializes controller, loads initial user details\\n- onSwitchToPage() - Updates user details when switching to page\\n- updateDetails() - Sets username, password fields and title from user object\\n\\nThe controller is used to:\\n\\n- Display and update the user profile details \\n- Allow editing and saving username/password\\n- Handle deleting the user account\\n- Provide navigation back to home page\\n\\nSo in summary, it controls the profile UI and handles saving/deleting the current user from the backend user data model.\&quot;,\&quot;/src/main/resources/json/users.json\&quot;:\&quot;This JSON file contains user account data for authentication.\\n\\nKey functions:\\n\\n- Data storage - It stores user credentials (username and password pairs) in a JSON array format. This allows the data to be easily parsed and accessed programmatically.\\n\\n- Authentication source - The usernames and passwords can be used to authenticate users logging into a system. Their credentials can be checked against the data in this file. \\n\\n- Easy to update - The file format makes it simple to add, remove or edit user accounts. Updating the JSON is just a matter of modifying the array contents.\\n\\n- Portable data - As a standalone file, the user data can be easily deployed with an application without needing a database. The JSON format is also universally supported.\\n\\n- Lightweight storage - For a smaller user base, storing credentials in a file is less complex than setting up a database. It avoids additional database configuration and dependencies.\\n\\n- Example data - The file provides sample user accounts that could be used for testing or demonstration purposes before real users are added.\\n\\nSo in summary, it centrally stores authentication credentials in an easily accessible and updatable format to enable user login functionality without a database.\&quot;,\&quot;/src/main/java/com/example/ovapp/components/CustomSuggestionPopup.java\&quot;:\&quot;This CustomSuggestionPopup class provides a custom popup component to display suggestions for autocomplete/autosuggest functionality.\\n\\nKey functions:\\n\\n- Displays a ListView of String suggestions populated from a SortedList\\n- Shows the popup below a TextField when show() is called\\n- Handles clicking a suggestion to fire a SuggestionSelectedEvent\\n- Can set an event handler for when a suggestion is selected \\n- Hides the popup when hide() is called\\n- Calculates screen position to show below the TextField\\n- Defines a SuggestionSelectedEvent class to notify of selection\\n\\nIn summary, it provides a reusable popup that can display suggestion options below a TextField and notify when one is selected via a custom event. This allows integrating autocomplete/autosuggest features into applications.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/FareRoute.java\&quot;:\&quot;This Java file defines a model class called FareRoute to represent a fare route returned from the NS API.\\n\\nKey things:\\n\\n- It is in the package com.example.ovapp.models.nsapi, indicating it is modeling data from the NS API.\\n\\n- FareRoute has two properties:\\n  - origin - A FareRouteDestination object representing the origin station\\n  - destination - A FareRouteDestination object representing the destination station\\n\\n- This class is simply a data model/POJO to represent a fare route between an origin and destination. It does not contain any methods.\\n\\n- Presumably this would be used to map fare route data returned from the NS API into Java objects that can then be used elsewhere in the application.\\n\\n- Key purpose is to define a class to represent a fare route that can be easily used in other parts of the code without having to deal directly with the raw API response data.\\n\\nSo in summary, the key functions are:\\n\\n1. Define a data model for a fare route \\n2. Allow mapping API response data into Java objects\\n3. Provide a simple way to represent a route between two destinations\&quot;,\&quot;/src/main/java/com/example/ovapp/enums/EPage.java\&quot;:\&quot;This Java file defines an enum called EPage that represents different page types in an application.\\n\\nSome key things about it:\\n\\n- EPage is an enum, meaning it defines a fixed set of constants that represent page types.\\n\\n- It contains constants for common page types like HOME, LOGIN, REGISTER, PROFILE, etc. \\n\\n- The constants can be used elsewhere in the code instead of hardcoded strings, to make page references more clear and avoid typos.\\n\\n- New page types can be added easily by defining a new constant in the enum.\\n\\n- Code that needs to handle different page types can use the enum values rather than strings, making the code more robust and refactor-proof.\\n\\n- It centralizes the definition of all valid page types in one place.\\n\\n- The enum values can be used for things like routing, authorization checks, analytics tracking etc to identify pages in a type-safe way.\\n\\nSo in summary, the key functions of this enum are:\\n\\n1. Define a set of valid page types \\n2. Provide type-safe references to pages\\n3. Avoid hardcoding page names as strings\\n4. Allow easy addition of new page types\\n5. Centralize page type definitions\\n\\nIt makes page handling code cleaner and more maintainable.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/NSApiRoot.java\&quot;:\&quot;This file defines a model class called NSApiRoot that represents the root object returned from the NS API.\\n\\nKey things:\\n\\n- It is a POJO (Plain Old Java Object) class that defines the structure of the JSON response from the NS API.\\n\\n- Fields are annotated with @SerializedName to map JSON property names to Java field names.\\n\\n- The fields represent the top-level properties of the NS API response:\\n  - source - The data source \\n  - trips - An array of Trip objects\\n  - scrollRequestBackwardContext - Pagination context for backward scrolling\\n  - scrollRequestForwardContext - Pagination context for forward scrolling\\n\\n- This class is used to deserialize the JSON response into a Java object using Gson or another JSON library. This gives a strongly typed representation of the API response in Java.\\n\\n- It defines the structure/schema of the NS API response so the client code knows which fields are available and their types.\\n\\n- Client code can then access the deserialized object\\u0027s fields like nSApiRoot.trips to get the array of trips.\\n\\nSo in summary, it defines a POJO to represent the NS API response structure for deserialization and consumption in the Java client code.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/SidebarController.java\&quot;:\&quot;This SidebarController class handles the sidebar navigation in the application.\\n\\nKey functions:\\n\\n- Initializes the sidebar UI elements and sets up localization/internationalization using ResourceBundles. Sets the initial language.\\n\\n- setLanguage() method updates all text labels based on the given language code by loading the appropriate ResourceBundle. \\n\\n- onDutchLanguageButtonPressed()/onEnglishLanguageButtonPressed() methods change the app language.\\n\\n- Navigation handler methods like onHomeButtonPressed(), onProfileButtonPressed() etc are called when the corresponding buttons are clicked. These methods hide the sidebar and navigate to the appropriate page using the Page class.\\n\\n- loginLabel text is dynamically updated based on whether a user is logged in or not, by checking the Users singleton class. \\n\\n- sidebar visibility is tied to a ChangeListener so the text gets updated whenever it becomes visible again.\\n\\nSo in summary, it handles localization, navigation clicks from the sidebar, dynamic login label text, and showing/hiding the sidebar.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/HomeController.java\&quot;:\&quot;This HomeController class handles the main UI and functionality for the home/search screen of an OV (public transport) planning app.\\n\\nKey functions:\\n\\n- Initializes UI elements like text fields, date picker, choice boxes from FXML\\n- Handles click event for search button to call API and load results\\n- Validates user input and shows errors\\n- Switches stations on button click\\n- Populates choice boxes like transport type\\n- Handles date/time selection \\n- Sends API request and loads results controller\\n- Shows error alerts for network issues\\n- Provides autocomplete suggestions for city text fields using a custom popup\\n- Internationalizes strings using resource bundle\\n- Generates list of time options\\n- Toggles sidebar visibility\\n\\nIn summary, it controls the main search/planning functionality, handles user input validation and API calls, provides autocomplete suggestions, and internationalizes the UI text. The controller class wires everything together for the home screen.\&quot;,\&quot;/src/main/java/com/example/ovapp/tools/Request.java\&quot;:\&quot;This Request.java file contains utilities for making requests to the NS API and processing the responses.\\n\\nKey functions:\\n\\n- sendApiRequest(): Makes a request to the NS API and returns the response parsed as an NSApiRoot object. It handles building the URL, making the HTTP request, and parsing the JSON response.\\n\\n- buildQueryString(): Builds the query string from the provided parameters map. It URL encodes keys and values.\\n\\n- processJsonResponse(): Parses the JSON response string and returns it as an NSApiRoot object using Gson. \\n\\n- readErrorResponse(): Reads and returns the error response body as a string if the request fails.\\n\\nSo in summary, it provides a single method (sendApiRequest) to make a request to the NS API with parameters, handle the response, and parse it into Java objects. It handles URL encoding, JSON parsing, and error handling. This centralizes the API request logic in one place.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/LoginController.java\&quot;:\&quot;This Java file defines the LoginController class for the login page of an application.\\n\\nKey functions:\\n\\n- onLoginButtonPressed(): Handles login button click by calling Users.getInstance().logIntoUser() to authenticate the user. If successful, navigates to home page, otherwise displays error message.\\n\\n- onRequestRegisterButtonClick(): Handles register button click by navigating to registration page. \\n\\n- onBackButtonPressed(): Handles back button click by clearing fields and navigating back to home page.\\n\\n- clearFields(): Resets password field and error label text.\\n\\nThe controller handles user authentication on login submit, navigation to registration on register click, and navigation back on back click. It displays error messages on failed login and clears fields on navigation.\&quot;,\&quot;/src/main/java/com/example/ovapp/tools/TripDetails.java\&quot;:\&quot;This TripDetails class is used to store and display details about a trip from the NS API.\\n\\nKey functions:\\n\\n- setFromTrip(Trip selectedTrip) - Populates the TripDetails object with data from a Trip object returned from the NS API. Sets fields like transfers, duration, departure/arrival times.\\n\\n- get/set methods for each field - Getter and setter methods to access and update each field like transfers, duration, times etc. \\n\\n- determineTrackOrLine(Trip) - Helper method to determine the track or line number to display based on data in the Trip object.\\n\\nThe purpose of this class is to take the raw Trip data from the API and extract/format the relevant details into fields that can be more easily displayed to the user. The setFromTrip method handles populating it from a Trip, and then the getters allow accessing each formatted field independently.\\n\\nSo in summary, it acts as a data model to store and present trip details in a user-friendly way based on the Trip data from the NS API.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/Stops.java\&quot;:\&quot;This Stops.java file defines a model class to represent stop information from the NS API.\\n\\nKey points:\\n\\n- It defines a Stops class with name, plannedDepartureDateTime, and plannedArrivalDateTime properties\\n\\n- It has getter methods for the name and times properties that format the date/time strings \\n\\n- The time formatting involves parsing the input string from the API into a Date object, then formatting it back to a HH:mm string\\n\\n- getFormattedTime is a private helper method that handles the date parsing and formatting \\n\\n- It parses the input string using a SimpleDateFormat with the API\\u0027s datetime format\\n\\n- It formats the Date back to a HH:mm string for display in the app\\n\\nSo in summary, this class models stop data and handles formatting the planned departure/arrival times from the raw API strings into a readable HH:mm format for use in the app. The key functions are the getters and the private date formatting helper.\&quot;,\&quot;/src/main/java/com/example/ovapp/TimeUtils.java\&quot;:\&quot;This TimeUtils class contains utility methods for working with times and durations.\\n\\nKey functions:\\n\\n- calculateArrivalTime(String departureTime, String duration): Takes a departure time and duration as strings, parses them to Date and int values, adds the duration minutes to the departure time, and returns the arrival time as a formatted string.\\n\\n- parseDurationToMinutes(String formattedDuration): Takes a duration string like \\\&quot;1:30\\\&quot; and parses it to extract the hours and minutes as integers, converts to total minutes, and returns it. \\n\\nThis class provides reusable methods for:\\n\\n- Parsing times/durations from strings to Date/int values \\n- Performing date/time calculations like adding durations\\n- Formatting times as strings\\n\\nIt centralizes common time/duration logic in one place to make the code cleaner and more maintainable. The methods can be reused anywhere times/durations need to be worked with in the app.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/SearchResultController.java\&quot;:\&quot;This SearchResultController class handles displaying the results of an NS API search.\\n\\nKey functions:\\n\\n- initialize() - Sets up event handlers for route buttons\\n- updateResultsDisplay() - Populates the UI with details of the top search results \\n- handleRouteButtonClick() - Handles clicking a route button, updates details pane\\n- updateDetails() - Fetches details for the selected route and populates labels\\n- convertToJson() - Converts a TripDetails object to JSON string for storage\\n- Various route button click handlers to update details pane\\n- onBackButtonPressed() - Handles back button press to navigate back\\n- ClickBookTrip() - Handler for booking trip button (not implemented)\\n\\nThe class:\\n\\n- Displays departure/arrival times, duration, transfers for top routes \\n- Allows selecting a route to see more detailed leg/stop information\\n- Stores details of selected route in JSON format on disk\\n- Handles navigation back to previous screen\\n\\nSo in summary, it displays search results from the NS API and allows viewing/selecting detailed trip information.\&quot;,\&quot;/src/main/java/com/example/ovapp/controllers/RegisterController.java\&quot;:\&quot;This RegisterController class handles the registration functionality in the application.\\n\\nKey functions:\\n\\n- onRegisterButtonPressed(): Handles registering a new user when the register button is clicked. It gets the username and password from the fields, tries to create a new user in the Users class and log in as that user. If successful, it clears the fields and navigates to the home page. If an error occurs, it displays the error message.\\n\\n- onBackButtonPressed(): Clears the fields and navigates back to the home page when the back button is clicked. \\n\\n- onRequestLoginButtonClick(): Navigates to the login page when the request login button is clicked.\\n\\n- clearFields(): Resets all the fields - password, username and error label.\\n\\nSo in summary, it controls the registration flow - gathering input, registering the user, logging them in or displaying errors. It also handles navigation back to home or to the login page.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/Destination.java\&quot;:\&quot;This Destination.java file defines a model class for destinations returned from the NS API.\\n\\nKey things it does:\\n\\n- Defines fields to store destination name, planned date/time, track, exit side, and checkin status\\n\\n- getFormattedExit() method formats the exit side as \\\&quot;Rechts\\\&quot; or \\\&quot;Links\\\&quot; for display \\n\\n- getFormattedTime() method parses the plannedDateTime string into a Date, then formats it as a HH:mm string for display\\n\\n- Parses the plannedDateTime string from the API response using SimpleDateFormat\\n\\n- Formats the date/time using different SimpleDateFormat patterns for input vs output\\n\\nSo in summary, it:\\n\\n1. Defines a model class for destination data \\n2. Stores destination attributes\\n3. Provides helper methods to format dates/times and exit sides for display\\n\\nThe key functions are getFormattedExit() and getFormattedTime() which handle formatting the raw API response values.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/Trip.java\&quot;:\&quot;This Trip.java file defines a Trip model class that represents a trip returned from the NS API.\\n\\nKey things:\\n\\n- It defines properties to represent the key fields returned in a trip response:\\n  - fareRoute - The fare route details\\n  - uid - Unique ID for the trip\\n  - transfers - Number of transfers\\n  - plannedDurationInMinutes - Total planned duration in minutes\\n  - legs - List of individual trip legs\\n\\n- It has a getFormattedDuration() method that formats the plannedDurationInMinutes into a HH:MM string format for display.\\n\\nSo in summary:\\n\\n- It defines a model class to represent a trip response from the NS API\\n- It maps the API response fields to properties \\n- It provides a helper method to format the duration field\\n\\nThis allows trips returned from the API to be easily mapped and used as objects in the Java application.\&quot;,\&quot;/src/main/java/com/example/ovapp/tools/Page.java\&quot;:\&quot;This Page.java file is used to manage page navigation and loading in the JavaFX application.\\n\\nThe key things it does:\\n\\n1. Defines an EPage enum to represent the different pages.\\n\\n2. Defines a PageInfo class to hold information about each page (FXML file location, Scene, Controller). \\n\\n3. Maps each EPage enum value to a PageInfo object using a HashMap. This stores the page configuration data.\\n\\n4. getPageInfo method retrieves the PageInfo for a given page enum. \\n\\n5. navigateTo method handles navigating to a new page:\\n   - Loads the PageInfo from the map\\n   - Loads the FXML and creates a Scene\\n   - Sets the Scene on the main Stage\\n   - Calls any \\\&quot;onSwitchToPage\\\&quot; method on the new page controller\\n   - Prints a log message\\n\\nSo in summary, it provides a central place to define and load all the pages, and a method to easily navigate between them while also calling page change logic on the controllers. This centralizes page handling in the application.\&quot;,\&quot;/pom.xml\&quot;:\&quot;This pom.xml file is the project object model file for a Maven Java project.\\n\\nSome key things it does:\\n\\n- Defines the project metadata like groupId, artifactId, version etc. This identifies the project.\\n\\n- Specifies dependencies on JavaFX, JUnit and Gson libraries. This allows the project to use these libraries.\\n\\n- Configures the Java compiler plugin to compile to Java 21. \\n\\n- Configures the JavaFX maven plugin to package the project as a self-contained application using jlink. It specifies the main class, launcher class, output file names etc. \\n\\n- Allows the project to be built and run using standard Maven commands like mvn clean install and mvn javafx:run.\\n\\nKey functions:\\n\\n- Defines the project structure and metadata\\n- Manages dependencies \\n- Configures plugins for compiling, testing and packaging \\n- Integrates JavaFX packaging to create self-contained application\\n- Standardizes the build process with Maven\\n\\nSo in summary, it sets up the project to be built, tested and packaged as a JavaFX application using Maven and its plugins.\&quot;,\&quot;/README.md\&quot;:\&quot;This README.md file provides documentation on the structure and setup of the Java application:\\n\\n- It explains that the application follows the MVC (Model-View-Controller) architecture pattern, with each page having a model, view, and controller.\\n\\n- It describes the roles of the view, controller, and model components - with the view handling UI rendering, controllers managing UI state, and models defining data structures. \\n\\n- It outlines the main classes/packages - like the model package containing data models, controllers handling page logic, and Main launching the initial view/controller. \\n\\n- It shows an example of accessing singleton user data from anywhere in the code.\\n\\n- It notes the Request class is used to fetch and convert API data for display.\\n\\n- It lists where static resources like icons, stylesheets and data files can be found.\\n\\n- It provides installation instructions for loading the project in IntelliJ IDEA.\\n\\nKey functions of the README:\\n\\n- Documents the overall application structure and architecture\\n- Explains the purpose and responsibilities of major components \\n- Shows code examples for common tasks\\n- Lists project setup and dependencies\\n- Acts as an introduction/guide for new developers\\n\\nSo in summary, it orients readers on how the Java application is organized and designed to be understood and worked with.\&quot;,\&quot;/src/main/java/com/example/ovapp/models/nsapi/FareRouteDestination.java\&quot;:\&quot;This Java file defines a model class for a fare route destination from the NS API.\\n\\nKey things:\\n\\n- It defines a FareRouteDestination class to represent a fare route destination object\\n- It has two properties:\\n  - varCode - a long to store the variable code of the destination\\n  - name - a String to store the name of the destination\\n- This is a simple POJO (Plain Old Java Object) class that just defines the properties of a fare route destination object returned from the NS API\\n- It does not contain any methods, just getters for the properties \\n- The purpose is to map the JSON response from the NS API to an object that can be easily used in the Java code\\n- Instances of this class can be created to represent individual fare route destinations and populate them from the API response\\n- The properties then allow easy access to the name and code of each destination object\\n\\nSo in summary, it defines a simple model class to represent fare route destinations from the NS API and map them to Java objects for use in the application code. No methods, just properties to map the JSON response.\&quot;}&quot;}" />
  </component>
</project>